@page "/users/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using TPTB2.Shared.Domain

<h3>Current Users</h3>   
@if (Users == null)
            {
                    <div class="alert alert-info">Loading Makes...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Username</th>
                <th>Contact</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var user in Users)
                {
                    <tr>
                        <td>@user.Username</td>  
                        <td>@user.Contact</td>
                        <td>
                            <a href="/user/view/@user.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/user/edit/@user.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(user.Id))">
                                <span class ="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }
        </tbody>
    </table>
}
<br />

@code {
    private List<Users> Users;

    protected async override Task OnInitializedAsync()
    {
        Users = await _client.GetFromJsonAsync<List<Users>>($"{Endpoints.UsersEndpoint}");
    }

    async Task Delete(int userId)
    {
        var users = Users.First(q => q.Id == userId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {users.Username} ?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.UsersEndpoint}/{userId}");
            await OnInitializedAsync();
        }
    }
}
